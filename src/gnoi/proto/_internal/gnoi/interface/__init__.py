# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: github.com/openconfig/gnoi/interface/interface.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .. import types as _types__


@dataclass
class SetLoopbackModeRequest(betterproto.Message):
    """
    SetLoopbackModeRequest requests the provide interface be have its loopback
    mode set to mode.  Mode may be vendor specific.  For example, on a
    transport device, available modes are "none", "mac", "phy", "phy_remote",
    "framer_facility", and "framer_terminal".
    """

    interface: _types__.Path = betterproto.message_field(1)
    mode: str = betterproto.string_field(2)


@dataclass
class SetLoopbackModeResponse(betterproto.Message):
    pass


@dataclass
class GetLoopbackModeRequest(betterproto.Message):
    interface: _types__.Path = betterproto.message_field(1)


@dataclass
class GetLoopbackModeResponse(betterproto.Message):
    mode: str = betterproto.string_field(1)


@dataclass
class ClearInterfaceCountersRequest(betterproto.Message):
    interface: List[_types__.Path] = betterproto.message_field(1)


@dataclass
class ClearInterfaceCountersResponse(betterproto.Message):
    pass


class InterfaceStub(betterproto.ServiceStub):
    async def set_loopback_mode(
        self, *, interface: Optional[_types__.Path] = None, mode: str = ""
    ) -> SetLoopbackModeResponse:
        """
        SetLoopbackMode is used to set the mode of loopback on a interface.
        """

        request = SetLoopbackModeRequest()
        if interface is not None:
            request.interface = interface
        request.mode = mode

        return await self._unary_unary(
            "/gnoi.interface.Interface/SetLoopbackMode",
            request,
            SetLoopbackModeResponse,
        )

    async def get_loopback_mode(
        self, *, interface: Optional[_types__.Path] = None
    ) -> GetLoopbackModeResponse:
        """
        GetLoopbackMode is used to get the mode of loopback on a interface.
        """

        request = GetLoopbackModeRequest()
        if interface is not None:
            request.interface = interface

        return await self._unary_unary(
            "/gnoi.interface.Interface/GetLoopbackMode",
            request,
            GetLoopbackModeResponse,
        )

    async def clear_interface_counters(
        self, *, interface: List[_types__.Path] = []
    ) -> ClearInterfaceCountersResponse:
        """
        ClearInterfaceCounters will reset the counters for the provided
        interface.
        """

        request = ClearInterfaceCountersRequest()
        if interface is not None:
            request.interface = interface

        return await self._unary_unary(
            "/gnoi.interface.Interface/ClearInterfaceCounters",
            request,
            ClearInterfaceCountersResponse,
        )
