# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: github.com/openconfig/gnoi/layer2/layer2.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Optional

import betterproto
import grpclib

from .. import types as _types__


class PerformBertResponseBertState(betterproto.Enum):
    UNKNOWN = 0
    DISABLED = 1
    RUNNING = 2
    COMPLETE = 3
    ERROR = 4


@dataclass
class ClearNeighborDiscoveryRequest(betterproto.Message):
    protocol: _types__.L3Protocol = betterproto.enum_field(1)
    address: str = betterproto.string_field(2)


@dataclass
class ClearNeighborDiscoveryResponse(betterproto.Message):
    pass


@dataclass
class ClearSpanningTreeRequest(betterproto.Message):
    interface: _types__.Path = betterproto.message_field(1)


@dataclass
class ClearSpanningTreeResponse(betterproto.Message):
    pass


@dataclass
class PerformBertRequest(betterproto.Message):
    # ID for retrieving a previous BERT run data - optional.
    id: str = betterproto.string_field(1)
    interface: _types__.Path = betterproto.message_field(2)


@dataclass
class PerformBertResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    state: "PerformBertResponseBertState" = betterproto.enum_field(2)
    elapsed_period: int = betterproto.int64_field(3)
    pattern: bytes = betterproto.bytes_field(4)
    errors: int = betterproto.int64_field(5)
    received_bits: int = betterproto.int64_field(6)


@dataclass
class ClearLldpInterfaceRequest(betterproto.Message):
    interface: _types__.Path = betterproto.message_field(1)


@dataclass
class ClearLldpInterfaceResponse(betterproto.Message):
    pass


@dataclass
class SendWakeOnLanRequest(betterproto.Message):
    interface: _types__.Path = betterproto.message_field(1)
    address: str = betterproto.string_field(2)
    mac_address: bytes = betterproto.bytes_field(3)


@dataclass
class SendWakeOnLanResponse(betterproto.Message):
    pass


class Layer2Stub(betterproto.ServiceStub):
    async def clear_neighbor_discovery(
        self, *, protocol: _types__.L3Protocol = 0, address: str = ""
    ) -> ClearNeighborDiscoveryResponse:
        """
        ClearNeighborDiscovery will clear either a specific neighbor entry or
        clear the entire table based on parameters provided. TODO: This method
        is subject to deprecation once OpenConfig models this state.
        """

        request = ClearNeighborDiscoveryRequest()
        request.protocol = protocol
        request.address = address

        return await self._unary_unary(
            "/gnoi.layer2.Layer2/ClearNeighborDiscovery",
            request,
            ClearNeighborDiscoveryResponse,
        )

    async def clear_spanning_tree(
        self, *, interface: Optional[_types__.Path] = None
    ) -> ClearSpanningTreeResponse:
        """
        ClearSpanningTree will reset a blocked spanning tree interface. TODO:
        This method is subject to deprecation once OpenConfig models this
        state.
        """

        request = ClearSpanningTreeRequest()
        if interface is not None:
            request.interface = interface

        return await self._unary_unary(
            "/gnoi.layer2.Layer2/ClearSpanningTree", request, ClearSpanningTreeResponse
        )

    async def perform_bert(self) -> AsyncIterator[PerformBertResponse]:
        """
        PerformBERT will perform a BERT operation on a port. The stream will
        return the current state of the operation as well as the ID for the
        operation.
        """

        request = PerformBertRequest()

        async for response in self._unary_stream(
            "/gnoi.layer2.Layer2/PerformBERT", request, PerformBertResponse,
        ):
            yield response

    async def clear_lldp_interface(self) -> ClearLldpInterfaceResponse:
        """
        ClearLLDPInterface will clear all LLDP adjacencies on the provided
        interface.
        """

        request = ClearLldpInterfaceRequest()

        return await self._unary_unary(
            "/gnoi.layer2.Layer2/ClearLLDPInterface",
            request,
            ClearLldpInterfaceResponse,
        )

    async def send_wake_on_lan(self) -> SendWakeOnLanResponse:
        """SendWakeOnLAN will send a WOL event on the requested interface."""

        request = SendWakeOnLanRequest()

        return await self._unary_unary(
            "/gnoi.layer2.Layer2/SendWakeOnLAN", request, SendWakeOnLanResponse
        )
