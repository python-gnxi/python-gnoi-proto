# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: github.com/openconfig/gnoi/otdr/otdr.proto, github.com/openconfig/gnoi/wavelength_router/wavelength_router.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, List, Optional

import betterproto
import grpclib

from .. import types as _types__


class FiberTypeProfile(betterproto.Enum):
    """
    Type definition for different profiles of fiber types. These match what is
    already defined in OpenConfig under the FIBER_TYPE_PROFILE identityref in
    openconfig-optical-amplifier.yang model.
    """

    FTP_UNKNOWN = 0
    FTP_DSF = 1
    FTP_LEAF = 2
    FTP_SSMF = 3
    FTP_TWC = 4
    FTP_TWRS = 5
    FTP_LS = 6
    FTP_TERAWAVE = 7
    FTP_TERALIGHT = 8


class InitiateRequestResultsMethod(betterproto.Enum):
    RESULTS_UNKNOWN = 0
    RESULTS_TO_LOCAL_DISK = 1
    RESULTS_IN_RESPONSE = 2


class InitiateProgressState(betterproto.Enum):
    UNKNOWN = 0
    RUNNING = 1
    PENDING = 2
    COMPLETE = 3


class InitiateErrorType(betterproto.Enum):
    UNSPECIFIED = 0
    ALREADY_IN_PROGRESS = 1
    HARDWARE_FAILURE = 2


class AdjustPsdRequestSignalDirection(betterproto.Enum):
    DIRECTION_UNKNOWN = 0
    DIRECTION_INPUT = 1
    DIRECTION_OUTPUT = 2


class AdjustPsdProgressState(betterproto.Enum):
    UNKNOWN = 0
    RUNNING = 1
    COMPLETE = 2


class AdjustPsdErrorType(betterproto.Enum):
    UNSPECIFIED = 0
    PORT_BUSY = 1
    HARDWARE_FAILURE = 2


class AdjustSpectrumRequestSignalDirection(betterproto.Enum):
    DIRECTION_UNKNOWN = 0
    DIRECTION_INPUT = 1
    DIRECTION_OUTPUT = 2


class AdjustSpectrumProgressState(betterproto.Enum):
    UNKNOWN = 0
    RUNNING = 1
    COMPLETE = 2


class AdjustSpectrumErrorType(betterproto.Enum):
    UNSPECIFIED = 0
    PORT_BUSY = 1
    HARDWARE_FAILURE = 2


@dataclass
class InitiateRequest(betterproto.Message):
    # Absolute path to the /components/component list member in the OpenConfig
    # model corresponding to the port to perform the OTDR trace from. (e.g.,
    # /components/component[name=otdr-1-1])
    component: _types__.Path = betterproto.message_field(1)
    # Describes how the results of the OTDR trace should be made available. More
    # than one option may be specified if desired.
    results_method: List["InitiateRequestResultsMethod"] = betterproto.enum_field(2)
    # Describes the configuration used to perform an OTDR trace.
    configuration: "OtdrConfiguration" = betterproto.message_field(3)
    # If specified, the device will label the OTDR trace so it can be recalled
    # later. For example, the initial OTDR trace measured during span
    # commissioning might be labeled "baseline".
    label: str = betterproto.string_field(4)


@dataclass
class OtdrConfiguration(betterproto.Message):
    """
    OTDR configuration options which can be set on the device. It is not
    required that every field be set as some fields may not apply for a given
    implementation.
    """

    # The time in seconds in which the OTDR trace will run continuously to
    # collect data.
    acquisition_time_s: int = betterproto.uint32_field(1)
    # The pulse width in nanoseconds which defines how long pulses sent by the
    # OTDR will be during the test.
    pulse_width_ns: float = betterproto.float_field(2)
    # The wavelength in MHz that will be sent by the OTDR. This may be left blank
    # if the OTDR only supports one wavelength.
    wavelength_mhz: int = betterproto.uint64_field(3)
    # The maximum fiber distance range in meters that the OTDR trace will
    # support.
    range_m: float = betterproto.float_field(4)
    # The type of fiber that is being measured.
    fiber_type: "FiberTypeProfile" = betterproto.enum_field(5)
    # The sampling resolution in meters.
    sampling_resolution_m: float = betterproto.float_field(6)


@dataclass
class InitiateProgress(betterproto.Message):
    # The state of the OTDR trace requested. Note that this does not include
    # error states as these should be returned as a gRPC error.
    state: "InitiateProgressState" = betterproto.enum_field(1)


@dataclass
class InitiateResults(betterproto.Message):
    # The local path in which the OTDR file is saved on the device.
    local_path: str = betterproto.string_field(1)
    # The OTDR trace details in a structured format.
    otdr_trace: "OtdrTrace" = betterproto.message_field(2)


@dataclass
class InitiateError(betterproto.Message):
    type: "InitiateErrorType" = betterproto.enum_field(1)
    detail: str = betterproto.string_field(2)


@dataclass
class InitiateResponse(betterproto.Message):
    """
    IntitiateResponse describes the possible response messages that will be
    streamed after the RPC is initiated. While the OTDR is running, "progress"
    messages should be sent at a regular interval. When the OTDR trace is
    completed, a final "results" or "error" message should be streamed before
    the RPC is terminated.
    """

    progress: "InitiateProgress" = betterproto.message_field(1, group="response")
    results: "InitiateResults" = betterproto.message_field(2, group="response")
    error: "InitiateError" = betterproto.message_field(3, group="response")


@dataclass
class OtdrTrace(betterproto.Message):
    # Total measured loss of the fiber.
    total_loss_db: float = betterproto.float_field(1)
    # Total measured length of the fiber in meters.
    total_length_m: float = betterproto.float_field(2)
    # Optical return loss of the fiber in dB.
    optical_return_loss_db: float = betterproto.float_field(3)
    # Average fiber loss (dB/km)
    average_loss_db_km: float = betterproto.float_field(4)
    # Discovered fiber type, if the OTDR can infer this information.
    discovered_fiber_type: "FiberTypeProfile" = betterproto.enum_field(5)
    events: List["Event"] = betterproto.message_field(6)


@dataclass
class Event(betterproto.Message):
    # Distance at which the event occurred in meters.
    distance_m: float = betterproto.float_field(1)
    # The fiber loss that occurred at the event in dB.
    loss_db: float = betterproto.float_field(2)
    # The reflection that occurred at the event in dB.
    reflection_db: float = betterproto.float_field(3)


@dataclass
class AdjustPsdRequest(betterproto.Message):
    # Absolute path to the /components/component list member in the OpenConfig
    # model corresponding to the port to perform the adjustment for. (e.g.,
    # /components/component[name=amp-1-1])
    component: _types__.Path = betterproto.message_field(1)
    # Describes the signal direction that should be adjusted relative to the
    # device. For example, "input" would be the signal entering into the device
    # from the far end device.
    direction: "AdjustPsdRequestSignalDirection" = betterproto.enum_field(2)


@dataclass
class AdjustPsdProgress(betterproto.Message):
    # The state of the OTDR trace requested. Note that this does not include
    # error states as these should be returned as a gRPC error.
    state: "AdjustPsdProgressState" = betterproto.enum_field(1)


@dataclass
class AdjustPsdError(betterproto.Message):
    type: "AdjustPsdErrorType" = betterproto.enum_field(1)
    detail: str = betterproto.string_field(2)


@dataclass
class AdjustPsdResponse(betterproto.Message):
    """
    AdjustPSDResponse describes the possible response messages that will be
    streamed after the RPC is initiated. While the OTDR is running, "progress"
    messages should be sent at a regular interval. When the adjustment is
    completed, an "error" message should be streamed if an error is encountered
    or the RPC should be terminated on success.
    """

    progress: "AdjustPsdProgress" = betterproto.message_field(1, group="response")
    error: "AdjustPsdError" = betterproto.message_field(2, group="response")


@dataclass
class CancelAdjustPsdResponse(betterproto.Message):
    pass


@dataclass
class AdjustSpectrumRequest(betterproto.Message):
    # Absolute path to the /components/component list member in the OpenConfig
    # model corresponding to the port to perform the adjustment for. (e.g.,
    # /components/component[name=wavelength-router-1-1])
    component: _types__.Path = betterproto.message_field(1)
    # Describes the signal direction that should be adjusted relative to the
    # device. For example, "input" would be the signal entering into the device
    # from the far end device.
    direction: "AdjustSpectrumRequestSignalDirection" = betterproto.enum_field(2)


@dataclass
class AdjustSpectrumProgress(betterproto.Message):
    # The state of the OTDR trace requested. Note that this does not include
    # error states as these should be returned as a gRPC error.
    state: "AdjustSpectrumProgressState" = betterproto.enum_field(1)


@dataclass
class AdjustSpectrumError(betterproto.Message):
    type: "AdjustSpectrumErrorType" = betterproto.enum_field(1)
    detail: str = betterproto.string_field(2)


@dataclass
class AdjustSpectrumResponse(betterproto.Message):
    """
    AdjustSpectrumResponse describes the possible response messages that will
    be streamed after the RPC is initiated. While the OTDR is running,
    "progress" messages should be sent at a regular interval. When the
    adjustment is completed, an "error" message should be streamed if an error
    is encountered or the RPC should be terminated on success.
    """

    progress: "AdjustSpectrumProgress" = betterproto.message_field(1, group="response")
    error: "AdjustSpectrumError" = betterproto.message_field(2, group="response")


@dataclass
class CancelAdjustSpectrumResponse(betterproto.Message):
    pass


class OtdrStub(betterproto.ServiceStub):
    async def initiate(
        self,
        *,
        component: Optional[_types__.Path] = None,
        results_method: List["InitiateRequestResultsMethod"] = [],
        configuration: Optional["OtdrConfiguration"] = None,
        label: str = "",
    ) -> AsyncIterator[InitiateResponse]:
        """
        Initiate triggers an optical time domain reflectometer (OTDR) trace to
        be run on a specified port. The results of the trace may be sent back
        in the response or saved on the device to be retrieved later. If the
        information is saved on the device a path to the file must be returned
        which can later be used by File.Get or File.TransferToRemote. The RPC
        should initiate the OTDR trace and wait until the OTDR trace has
        completed and the device has processed the results before returning. If
        the RPC is cancelled while in operation, the running OTDR trace should
        stop.
        """

        request = InitiateRequest()
        if component is not None:
            request.component = component
        request.results_method = results_method
        if configuration is not None:
            request.configuration = configuration
        request.label = label

        async for response in self._unary_stream(
            "/gnoi.optical.OTDR/Initiate", request, InitiateResponse,
        ):
            yield response


class WavelengthRouterStub(betterproto.ServiceStub):
    async def adjust_psd(self) -> AsyncIterator[AdjustPsdResponse]:
        """
        AdjustPSD performs a power spectral density (PSD) adjustment on an
        optical DWDM line system port. This RPC's initial message triggers
        adjustments. The target should validate the request, and immediately
        begin the adjustment as long as another adjustment is not already
        running. As this RPC may take multiple minutes, the state should be
        regularly streamed to the client. The operation should be completed on
        the device regardless of the state of the RPC channel to the initiating
        client. A client that becomes disconnected during an operation can
        reconnect, requesting the same operation, and receive status updates
        this way. There is no means by which an adjustment that has been
        triggered by a client can be cancelled unless the CancelAdjustPSD RPC
        is used. DEPRECATED, use AdjustSpectrum.
        """

        request = AdjustPsdRequest()

        async for response in self._unary_stream(
            "/gnoi.optical.WavelengthRouter/AdjustPSD", request, AdjustPsdResponse,
        ):
            yield response

    async def cancel_adjust_psd(self) -> CancelAdjustPsdResponse:
        """
        CancelAdjustPSD cancels an in-progress AdjustPSD request. If an
        adjustment is not being performed for the provided request, then the
        RPC should return successfully. DEPRECATED, use CancelAdjustSpectrum.
        """

        request = AdjustPsdRequest()

        return await self._unary_unary(
            "/gnoi.optical.WavelengthRouter/CancelAdjustPSD",
            request,
            CancelAdjustPsdResponse,
        )

    async def adjust_spectrum(
        self,
        *,
        component: Optional[_types__.Path] = None,
        direction: "AdjustSpectrumRequestSignalDirection" = 0,
    ) -> AsyncIterator[AdjustSpectrumResponse]:
        """
        AdjustSpectrum performs a spectrum power adjustment on an optical DWDM
        line system port. This RPC's initial message triggers adjustments. The
        target should validate the request, and immediately begin the
        adjustment as long as another adjustment is not already running. As
        this RPC may take multiple minutes, the state should be regularly
        streamed to the client. The operation should be completed on the device
        regardless of the state of the RPC channel to the initiating client. A
        client that becomes disconnected during an operation can reconnect,
        requesting the same operation, and receive status updates this way.
        There is no means by which an adjustment that has been triggered by a
        client can be cancelled unless the CancelAdjustSpectrum RPC is used.
        """

        request = AdjustSpectrumRequest()
        if component is not None:
            request.component = component
        request.direction = direction

        async for response in self._unary_stream(
            "/gnoi.optical.WavelengthRouter/AdjustSpectrum",
            request,
            AdjustSpectrumResponse,
        ):
            yield response

    async def cancel_adjust_spectrum(
        self,
        *,
        component: Optional[_types__.Path] = None,
        direction: "AdjustSpectrumRequestSignalDirection" = 0,
    ) -> CancelAdjustSpectrumResponse:
        """
        CancelAdjustSpectrum cancels an in-progress AdjustSpectrum request. If
        an adjustment is not being performed for the provided request, then the
        RPC should return successfully.
        """

        request = AdjustSpectrumRequest()
        if component is not None:
            request.component = component
        request.direction = direction

        return await self._unary_unary(
            "/gnoi.optical.WavelengthRouter/CancelAdjustSpectrum",
            request,
            CancelAdjustSpectrumResponse,
        )
