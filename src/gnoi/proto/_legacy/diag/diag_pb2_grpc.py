# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from gnoi.proto._legacy.diag import diag_pb2 as gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2


class DiagStub(object):
    """The Diag service exports to main set of RPCs:
    1- BERT related RPCs: Used to perform Bit Error Rate Test (BERT)
    operations on a set of ports.
    2- BURNIN related RPCs: Used to perform a vendor-provided Burnin test on the
    network device to ensure the device is ready to start serving traffic.
    Burnin tests are typically run in the field, as part of turnup or repair
    workflow.
    Note: The RPCs defined here are are stateless operations and them
    failing/passing should not leave any permanent artifact on the network device
    (unless there is something wrong HW-wise).
    Note: By "port" we refer to a channelized frontpanel or backplane port on a
    chassis. In OpenConfig YANG models, there is a one-to-one relationship
    between a port as used here and an "interface". Therefore, the "types.Path"
    fields below for ports correspond to "/interfaces/interface" in YANG models.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartBERT = channel.unary_unary(
                '/gnoi.diag.Diag/StartBERT',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StartBERTRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StartBERTResponse.FromString,
                )
        self.StopBERT = channel.unary_unary(
                '/gnoi.diag.Diag/StopBERT',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StopBERTRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StopBERTResponse.FromString,
                )
        self.GetBERTResult = channel.unary_unary(
                '/gnoi.diag.Diag/GetBERTResult',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.GetBERTResultRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.GetBERTResultResponse.FromString,
                )


class DiagServicer(object):
    """The Diag service exports to main set of RPCs:
    1- BERT related RPCs: Used to perform Bit Error Rate Test (BERT)
    operations on a set of ports.
    2- BURNIN related RPCs: Used to perform a vendor-provided Burnin test on the
    network device to ensure the device is ready to start serving traffic.
    Burnin tests are typically run in the field, as part of turnup or repair
    workflow.
    Note: The RPCs defined here are are stateless operations and them
    failing/passing should not leave any permanent artifact on the network device
    (unless there is something wrong HW-wise).
    Note: By "port" we refer to a channelized frontpanel or backplane port on a
    chassis. In OpenConfig YANG models, there is a one-to-one relationship
    between a port as used here and an "interface". Therefore, the "types.Path"
    fields below for ports correspond to "/interfaces/interface" in YANG models.
    """

    def StartBERT(self, request, context):
        """Starts BERT operation on a set of ports. Each BERT operation is uniquely
        identified by an ID, which is given by the caller. The caller can then
        use this ID (as well as the list of the ports) to stop the BERT operation
        and/or get the BERT results. This RPC is expected to return an error status
        in the following situations:
        - When BERT operation is supported on none of the ports specified by
        the request.
        - When BERT is already in progress on any port specified by the request.
        - In case of any low-level HW/SW internal errors.
        The RPC returns an OK status of none of these situations is encountered.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBERT(self, request, context):
        """Stops an already in-progress BERT operation on a set of ports. The caller
        uses the BERT operation ID it previously used when starting the operation
        to stop it. The RPC is expected to return an error status in the following
        situations:
        - When there is at least one BERT operation in progress on a port which
        cannot be stopped in the middle of the operation (either due to lack of
        support or internal problems).
        - When no BERT operation, which matches the given BERT operation ID, is in
        progress or completed on any of the ports specified by the request.
        - When the BERT operation ID does not match the in progress or completed
        BERT operation on any of the ports specified by the request.
        The RPC returns an OK status of none of these situations is encountered.
        Note that a BERT operation is considered completed if the device has a
        record/history of it. Also note that it is OK to receive a stop request for
        a port which has completed BERT, as long as the recorded BERT operation ID
        matches the one specified by the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBERTResult(self, request, context):
        """Gets BERT results during the BERT operation or after it completes. The
        caller uses the BERT operation ID it previously used when starting the
        operation to query it. The device is expected to keep the results for
        last N BERT operations for some amount of time, as specified by the
        product requirement. This RPC is expected to return error status in the
        following situations:
        - When no BERT operation, which matches the given BERT operation ID, is in
        progress or completed on any of the ports specified by the request.
        - When the BERT operation ID does not match the in progress or completed
        BERT operation on any of the ports specified by the request.
        The RPC returns an OK status of none of these situations is encountered.
        Note that a BERT operation is considered completed if device has a
        record of it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiagServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartBERT': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBERT,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StartBERTRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StartBERTResponse.SerializeToString,
            ),
            'StopBERT': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBERT,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StopBERTRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StopBERTResponse.SerializeToString,
            ),
            'GetBERTResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBERTResult,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.GetBERTResultRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.GetBERTResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnoi.diag.Diag', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Diag(object):
    """The Diag service exports to main set of RPCs:
    1- BERT related RPCs: Used to perform Bit Error Rate Test (BERT)
    operations on a set of ports.
    2- BURNIN related RPCs: Used to perform a vendor-provided Burnin test on the
    network device to ensure the device is ready to start serving traffic.
    Burnin tests are typically run in the field, as part of turnup or repair
    workflow.
    Note: The RPCs defined here are are stateless operations and them
    failing/passing should not leave any permanent artifact on the network device
    (unless there is something wrong HW-wise).
    Note: By "port" we refer to a channelized frontpanel or backplane port on a
    chassis. In OpenConfig YANG models, there is a one-to-one relationship
    between a port as used here and an "interface". Therefore, the "types.Path"
    fields below for ports correspond to "/interfaces/interface" in YANG models.
    """

    @staticmethod
    def StartBERT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnoi.diag.Diag/StartBERT',
            gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StartBERTRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StartBERTResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopBERT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnoi.diag.Diag/StopBERT',
            gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StopBERTRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.StopBERTResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBERTResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnoi.diag.Diag/GetBERTResult',
            gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.GetBERTResultRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_diag_dot_diag__pb2.GetBERTResultResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
