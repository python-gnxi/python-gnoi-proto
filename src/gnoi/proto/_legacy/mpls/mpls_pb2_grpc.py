# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from gnoi.proto._legacy.mpls import mpls_pb2 as gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2


class MPLSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClearLSP = channel.unary_unary(
                '/gnoi.mpls.MPLS/ClearLSP',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPResponse.FromString,
                )
        self.ClearLSPCounters = channel.unary_unary(
                '/gnoi.mpls.MPLS/ClearLSPCounters',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPCountersRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPCountersResponse.FromString,
                )
        self.MPLSPing = channel.unary_stream(
                '/gnoi.mpls.MPLS/MPLSPing',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.MPLSPingRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.MPLSPingResponse.FromString,
                )


class MPLSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClearLSP(self, request, context):
        """ClearLSP clears a single tunnel (requests for it's route to be
        recalculated).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearLSPCounters(self, request, context):
        """ClearLSPCounters will clear the MPLS counters for the provided LSP.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MPLSPing(self, request, context):
        """An MPLS ping, specified as per RFC4379.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MPLSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClearLSP': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearLSP,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPResponse.SerializeToString,
            ),
            'ClearLSPCounters': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearLSPCounters,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPCountersRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPCountersResponse.SerializeToString,
            ),
            'MPLSPing': grpc.unary_stream_rpc_method_handler(
                    servicer.MPLSPing,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.MPLSPingRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.MPLSPingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnoi.mpls.MPLS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MPLS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClearLSP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnoi.mpls.MPLS/ClearLSP',
            gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearLSPCounters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnoi.mpls.MPLS/ClearLSPCounters',
            gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPCountersRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.ClearLSPCountersResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MPLSPing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gnoi.mpls.MPLS/MPLSPing',
            gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.MPLSPingRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_mpls_dot_mpls__pb2.MPLSPingResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
