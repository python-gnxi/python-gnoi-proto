# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from gnoi.proto._legacy.otdr import otdr_pb2 as gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2


class OTDRStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initiate = channel.unary_stream(
                '/gnoi.optical.OTDR/Initiate',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2.InitiateRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2.InitiateResponse.FromString,
                )


class OTDRServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initiate(self, request, context):
        """Initiate triggers an optical time domain reflectometer (OTDR) trace to
        be run on a specified port. The results of the trace may be sent back in
        the response or saved on the device to be retrieved later. If the
        information is saved on the device a path to the file must be returned
        which can later be used by File.Get or File.TransferToRemote. The RPC
        should initiate the OTDR trace and wait until the OTDR trace has completed
        and the device has processed the results before returning. If the RPC is
        cancelled while in operation, the running OTDR trace should stop.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OTDRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initiate': grpc.unary_stream_rpc_method_handler(
                    servicer.Initiate,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2.InitiateRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2.InitiateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnoi.optical.OTDR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OTDR(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initiate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/gnoi.optical.OTDR/Initiate',
            gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2.InitiateRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_otdr_dot_otdr__pb2.InitiateResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
