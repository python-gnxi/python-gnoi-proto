# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from gnoi.proto._legacy.factory_reset import reset_pb2 as gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2


class FactoryResetStub(object):
    """The FactoryReset service exported by Targets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/gnoi.factory_reset.FactoryReset/Start',
                request_serializer=gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2.StartRequest.SerializeToString,
                response_deserializer=gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2.StartResponse.FromString,
                )


class FactoryResetServicer(object):
    """The FactoryReset service exported by Targets.
    """

    def Start(self, request, context):
        """The Start RPC allows the Client to instruct the Target to immediately
        clean all existing state and boot the Target in the same condition as it is
        shipped from factory. State includes storage, configuration, logs,
        certificates and licenses.

        Optionally allows rolling back the OS to the same version shipped from
        factory.

        Optionally allows for the Target to zero-fill permanent storage where state
        data is stored.

        If any of the optional flags is set but not supported, a gRPC Status with
        code INVALID_ARGUMENT must be returned with the details value set to a
        properly populated ResetError message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FactoryResetServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2.StartRequest.FromString,
                    response_serializer=gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2.StartResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gnoi.factory_reset.FactoryReset', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FactoryReset(object):
    """The FactoryReset service exported by Targets.
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gnoi.factory_reset.FactoryReset/Start',
            gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2.StartRequest.SerializeToString,
            gnoi_dot_proto_dot___legacy_dot_factory__reset_dot_reset__pb2.StartResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
